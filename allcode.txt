========================================
File: utils/document_filler.py
========================================
import re
import os
from io import BytesIO
from datetime import date
from docx import Document
from docx.shared import Inches
from pptx import Presentation
from pptx.util import Inches as PptxInches # For PPTX image sizing
import pandas as pd
import uuid # For temporary filenames

from utils.extract_placeholders import extract_placeholders, extract_text_from_file

def fill_document_template(
    tpl_path: str,
    file_inputs: dict[str, "werkzeug.datastructures.FileStorage"], # Pass FileStorage object directly
    text_inputs: dict[str, str],
    out_path: str
):
    """
    Fills a .docx or .pptx template using both text and file-based placeholder values.

    Args:
    - tpl_path:      Path to the input .docx or .pptx template
    - file_inputs:   Dict mapping placeholder -> FileStorage (uploaded file)
    - text_inputs:   Dict mapping placeholder -> raw string (manual entry)
    - out_path:      Where to write the final filled document
    """
    file_extension = tpl_path.lower().rsplit(".", 1)[-1]
    today_str = date.today().strftime("%Y-%m-%d") # Use hyphens for readability

    if file_extension == "docx":
        doc = Document(tpl_path)
        placeholders = extract_placeholders(tpl_path)

        for ph in placeholders:
            tag = f"{{{ph}}}"
            file_storage = file_inputs.get(ph) # This is now the FileStorage object
            value = text_inputs.get(ph, "")

            # Iterate over all paragraphs and runs to find and replace
            for para in doc.paragraphs:
                # Optimized replacement for text placeholders (in-place)
                if tag in para.text:
                    # Clean up the paragraph's text before inserting new runs if needed
                    # This advanced replacement ensures surrounding text is kept.
                    # This part is simplified for brevity; a full solution is more robust.
                    # For complex scenarios like multiple placeholders in one run,
                    # or partial replacement within a run, more logic is needed.
                    inline_replacement_done = False
                    if not file_storage: # Only for pure text replacement
                        # Replace the tag directly in the paragraph's text
                        # This works if the entire paragraph is the placeholder or if
                        # you don't care about run-level formatting.
                        # For true in-place formatting, you'd iterate runs and replace there.
                        para.text = para.text.replace(tag, str(value))
                        inline_replacement_done = True

                    if not inline_replacement_done: # If we need to insert objects or large text
                        # Remove the placeholder text from the paragraph
                        para.text = para.text.replace(tag, "")

                        # Handle IMAGE upload
                        if file_storage and file_storage.filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".bmp")):
                            img_data = file_storage.read()
                            tmp_path = f"/tmp/{uuid.uuid4()}_{file_storage.filename}" # Unique temporary name
                            with open(tmp_path, "wb") as tmp:
                                tmp.write(img_data)
                            para.add_run().add_picture(tmp_path, width=Inches(4))
                            os.remove(tmp_path)
                            file_storage.stream.seek(0) # Reset stream if read for image processing

                        # Handle Excel (.xlsx) as table
                        elif file_storage and file_storage.filename.lower().endswith(".xlsx"):
                            file_storage.stream.seek(0) # Ensure stream is at the beginning
                            try:
                                df = pd.read_excel(file_storage.stream)
                                # Add table at the end of the document (python-docx limitation for in-place)
                                # To insert truly in-place, you'd need to delete the placeholder paragraph
                                # and insert the table before/after a specific content control or bookmark.
                                table = doc.add_table(rows=1, cols=len(df.columns))
                                hdr_cells = table.rows[0].cells
                                for i, col in enumerate(df.columns):
                                    hdr_cells[i].text = str(col)
                                for _, row in df.iterrows():
                                    row_cells = table.add_row().cells
                                    for i, cell in enumerate(row):
                                        row_cells[i].text = str(cell)
                            except Exception as e:
                                para.add_run(f"[Error reading Excel: {e}]")
                            file_storage.stream.seek(0) # Reset stream after reading

                        # Handle txt/docx/pptx as plain text insertion
                        elif file_storage:
                            file_storage.stream.seek(0) # Ensure stream is at the beginning
                            extracted = extract_text_from_file(file_storage.stream, file_storage.filename)
                            # Replace placeholder with extracted text, adding line breaks
                            # This replaces the original paragraph content if the placeholder was found.
                            # For in-place text: consider splitting the paragraph into runs and inserting.
                            # For now, it will replace the paragraph with the extracted text.
                            for line in extracted.splitlines():
                                para.add_run(line).add_break()
                            file_storage.stream.seek(0) # Reset stream after reading

                        # Manual text input fallback (if not handled by inline replacement above)
                        # This would only be hit if a placeholder was in the paragraph,
                        # but it wasn't a file input and wasn't handled by inline_replacement_done
                        else:
                            # This block is now less likely to be hit for pure text
                            # placeholders if the inline replacement logic works.
                            para.add_run(str(value))

            # Iterate over all tables in the document to find and replace in cells
            for table in doc.tables:
                for row in table.rows:
                    for cell in row.cells:
                        if tag in cell.text:
                            # Replace the tag directly in the cell's text
                            cell.text = cell.text.replace(tag, str(value))


        doc.save(out_path)
    elif file_extension == "pptx":
        prs = Presentation(tpl_path)
        placeholders = extract_placeholders(tpl_path)

        for ph in placeholders:
            tag = f"{{{ph}}}"
            file_storage = file_inputs.get(ph)
            value = text_inputs.get(ph, "")

            for slide in prs.slides:
                for shape in slide.shapes:
                    if hasattr(shape, "text_frame") and shape.text_frame:
                        if tag in shape.text_frame.text:
                            # PPTX: Simple text replacement is possible.
                            # In-place image/table insertion is significantly harder with python-pptx
                            # and often requires more complex slide manipulation or pre-defined placeholders.
                            # We'll prioritize text replacement.
                            if file_storage:
                                if file_storage.filename.lower().endswith((".png", ".jpg", ".jpeg", ".gif", ".bmp")):
                                    # PPTX: You can add pictures, but not easily in place of a placeholder.
                                    # For a simple solution, we'll replace the text placeholder with a notice.
                                    # For real image insertion, you'd typically need to design a placeholder
                                    # picture shape in the template and replace its content.
                                    shape.text_frame.text = shape.text_frame.text.replace(tag, "[IMAGE PLACEHOLDER - INSERT MANUALLY]")
                                    # Alternatively, add a new picture to the slide at a default position:
                                    # slide.shapes.add_picture(file_storage.stream, PptxInches(1), PptxInches(1))
                                    # But this won't be "in-place".
                                else: # Handle other file types as text
                                    file_storage.stream.seek(0)
                                    extracted = extract_text_from_file(file_storage.stream, file_storage.filename)
                                    shape.text_frame.text = shape.text_frame.text.replace(tag, extracted)
                                file_storage.stream.seek(0) # Reset stream after reading
                            else:
                                shape.text_frame.text = shape.text_frame.text.replace(tag, str(value))
        prs.save(out_path)
    else:
        raise ValueError(f"Unsupported template file type: .{file_extension}")





========================================
File: utils/extract_placeholders.py
========================================
import re
from io import BytesIO
from docx import Document # Import here to avoid circular import if needed elsewhere
from pptx import Presentation # Import here as well

def extract_placeholders(path: str) -> list[str]:
    """
    Return unique placeholder names (no braces) from a DOCX or PPTX file.
    Order is preserved from first appearance.
    """
    text_content = "" # Renamed for clarity

    if path.lower().endswith(".docx"):
        doc = Document(path)
        text_content = "\n".join(p.text for p in doc.paragraphs)
    elif path.lower().endswith(".pptx"): # Use elif for explicit handling
        prs = Presentation(path)
        texts_from_pptx = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text_frame") and shape.text_frame: # Check for text_frame to ensure it's a text-holding shape
                    texts_from_pptx.append(shape.text_frame.text)
        text_content = "\n".join(texts_from_pptx)
    # else: If an unsupported file type, text_content remains empty,
    # leading to an empty list of placeholders, which is acceptable behavior.

    # Extract {PLACEHOLDER} entries
    raw = re.findall(r"\{([^}]+)\}", text_content)
    seen = set()
    ordered = []
    for ph in raw:
        key = ph.strip()
        if key not in seen:
            seen.add(key)
            ordered.append(key)
    return ordered

def extract_text_from_file(stream: BytesIO, filename: str) -> str:
    """
    Extract text from uploaded file stream based on extension:
    - .txt  : decode UTF-8
    - .docx : extract all paragraphs
    - .pptx : extract all shape text from slides
    """
    ext = filename.lower().rsplit(".", 1)[-1]
    stream.seek(0) # Ensure stream is at the beginning

    if ext == "txt":
        return stream.read().decode("utf-8", errors="ignore")

    if ext == "docx":
        doc = Document(stream)
        return "\n".join(p.text for p in doc.paragraphs)

    if ext == "pptx":
        prs = Presentation(stream)
        texts = []
        for slide in prs.slides:
            for shape in slide.shapes:
                if hasattr(shape, "text_frame") and shape.text_frame: # Check for text_frame
                    texts.append(shape.text_frame.text)
        return "\n".join(texts)

    # fallback for unrecognized file types (e.g., if an image is passed here)
    # Attempt to decode as text, though it will likely be garbled for non-text files.
    return stream.read().decode("utf-8", errors="ignore")




========================================
File: app.py
========================================
from flask import Flask, render_template, request, send_file, abort
from utils.extract_placeholders import extract_placeholders
from utils.document_filler import fill_document_template # Changed import
from uuid import uuid4
import os
import tempfile # For better temporary file management
from datetime import date

app = Flask(__name__)

# The five “key” text fields + country (now also used for filename)
KEY_FIELDS = ["CUSTOMER_NAME", "CITY_NAME", "SA_EMAIL", "RAX_TEAM", "PARTNER_NAME", "COUNTRY"]

@app.route("/", methods=["GET"])
def index():
    # Renders the bare-bones HTML/JS shell
    return render_template("index.html", KEY_FIELDS=KEY_FIELDS)

@app.route("/analyze", methods=["POST"])
def analyze():
    if "template" not in request.files:
        return {"error": "No template file provided"}, 400

    tpl = request.files["template"]
    if tpl.filename == '':
        return {"error": "No selected template file"}, 400

    # Ensure the file is a DOCX or PPTX for analysis
    if not tpl.filename.lower().endswith((".docx", ".pptx")):
        return {"error": "Only .docx and .pptx templates are supported."}, 400

    # Save uploaded template temporarily for analysis
    # Using tempfile.NamedTemporaryFile ensures unique name and handles cleanup
    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(tpl.filename)[1]) as tmp_tpl:
        tpl.save(tmp_tpl.name)
        tmp_path = tmp_tpl.name # Get the actual path

    try:
        # Extract ALL placeholders, preserving their document order
        placeholders = extract_placeholders(tmp_path)
    except Exception as e:
        # Catch potential errors during document parsing (e.g., corrupted file)
        return {"error": f"Error analyzing template: {e}"}, 500
    finally:
        os.unlink(tmp_path) # Clean up the temporary template file immediately

    # Return them in one ordered list
    return {"placeholders": placeholders}

@app.route("/generate", methods=["POST"])
def generate():
    if "template" not in request.files:
        return {"error": "No template file provided for generation"}, 400

    tpl = request.files["template"]
    if tpl.filename == '':
        return {"error": "No selected template file for generation"}, 400

    # Ensure the file is a DOCX or PPTX
    file_extension = tpl.filename.lower().rsplit(".", 1)[-1]
    if file_extension not in ("docx", "pptx"):
        return {"error": "Only .docx and .pptx templates are supported for generation."}, 400

    # Save the template file temporarily for processing
    with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(tpl.filename)[1]) as tmp_tpl:
        tpl.save(tmp_tpl.name)
        tpl_path = tmp_tpl.name

    text_inputs = {
        key: request.form.get(key, "")
        for key in KEY_FIELDS
    }

    file_inputs = {}
    for key in request.files:
        if key != "template" and key not in KEY_FIELDS: # Exclude the template file itself
            f = request.files[key]
            if f and f.filename:
                file_inputs[key] = f # Pass the FileStorage object directly

    # Generate output filename
    customer_name = text_inputs.get("CUSTOMER_NAME", "UnknownCustomer").replace(" ", "_")
    partner_name = text_inputs.get("PARTNER_NAME", "UnknownPartner").replace(" ", "_")
    sa_email_prefix = text_inputs.get("SA_EMAIL", "UnknownSA").split('@')[0] # Get prefix before @
    today_str = date.today().strftime("%Y%m%d")

    # Construct the base filename, preserving the original extension
    output_filename_base = f"{customer_name}_{partner_name}_{sa_email_prefix}_{today_str}"
    out_filename = f"{output_filename_base}.{file_extension}"

    # Generate and send back
    # Using tempfile.NamedTemporaryFile for the output file
    with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_extension}") as tmp_out:
        out_path = tmp_out.name

    try:
        fill_document_template(tpl_path, file_inputs, text_inputs, out_path)
    except ValueError as e:
        # Catch specific errors from fill_document_template
        return {"error": str(e)}, 400
    except Exception as e:
        return {"error": f"Document generation failed: {e}"}, 500
    finally:
        os.unlink(tpl_path) # Clean up the temporary template file

    try:
        return send_file(out_path,
                         as_attachment=True,
                         download_name=out_filename,
                         mimetype=f"application/vnd.openxmlformats-officedocument.{'wordprocessingml.document' if file_extension == 'docx' else 'presentationml.presentation'}")
    finally:
        os.unlink(out_path) # Clean up the generated file after sending

if __name__=="__main__":
    app.run(debug=True)




========================================
File: static/style.css
========================================
body {
    font-family: Arial, sans-serif;
    margin: 20px;
    background-color: #f4f4f4;
    color: #333;
}

h1 {
    color: #0056b3;
    text-align: center;
}

section {
    background-color: #fff;
    padding: 20px;
    margin-bottom: 20px;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
}

input[type="text"],
input[type="file"] {
    width: calc(100% - 22px); /* Adjust for padding and border */
    padding: 10px;
    margin-bottom: 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box; /* Include padding and border in the element's total width and height */
}

button {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 10px 20px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}

.form-group {
    margin-bottom: 15px;
}




========================================
File: templates/index.html
========================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>DocFactory</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <h1>📄 Fill in your placeholders</h1>

  <section id="uploader">
    <form id="tplForm" enctype="multipart/form-data">
      <label>Select your .docx or .pptx template:</label>
      <input type="file" name="template" accept=".docx,.pptx" required>
      <button type="submit">Analyze Template</button>
    </form>
  </section>

  <section id="fields" style="display:none">
    <form id="genForm" enctype="multipart/form-data" method="POST" action="{{ url_for('generate') }}">
      <div id="inputsContainer"></div>
      <button type="submit">Generate Document</button>
    </form>
  </section>

  <script>
    const KEY_FIELDS = {{ KEY_FIELDS|tojson }};

    // Analyze form → build dynamic fields
    document.getElementById('tplForm').addEventListener('submit', async ev => {
      ev.preventDefault();
      const form = ev.target;
      const data = new FormData(form);
      
      // Get the template file from the first form
      const tplFile = form.querySelector('input[name=template]').files[0];
      
      // Append the template file to the FormData object
      data.append('template', tplFile);

      // Fetch placeholders
      const res = await fetch('/analyze', { method:'POST', body:data });
      const { placeholders } = await res.json();

      // Hide uploader, show generator
      document.getElementById('uploader').style.display = 'none';
      document.getElementById('fields').style.display = '';

      // Create a hidden input for the template file in the second form
      // This is a common workaround for re-submitting files in a multi-step form.
      // A more robust solution for larger apps would involve storing the file
      // temporarily on the server after /analyze and passing a file ID.
      const fileInputClone = document.createElement('input');
      fileInputClone.type = 'file';
      fileInputClone.name = 'template'; // Must match the name in app.py
      
      // Create a DataTransfer object to assign the file
      const dataTransfer = new DataTransfer();
      dataTransfer.items.add(tplFile);
      fileInputClone.files = dataTransfer.files;
      
      fileInputClone.style.display = 'none';
      document.getElementById('genForm').appendChild(fileInputClone);


      // Build inputs in order
      const container = document.getElementById('inputsContainer');
      placeholders.forEach(ph => {
        const div = document.createElement('div');
        div.className = 'form-group';
        const label = document.createElement('label');
        label.textContent = ph;
        div.appendChild(label);

        if (KEY_FIELDS.includes(ph)) {
          // text input
          const inp = document.createElement('input');
          inp.type = 'text';
          inp.name = ph;
          // Only make required if it's one of the filename fields
          if (["CUSTOMER_NAME", "PARTNER_NAME", "SA_EMAIL"].includes(ph)) {
            inp.required = true;
          }
          div.appendChild(inp);
        } else {
          // file input
          const inp = document.createElement('input');
          inp.type = 'file';
          inp.name = ph;
          inp.accept = 'image/*,.docx,.pptx,.xlsx,.txt';
          div.appendChild(inp);
        }

        container.appendChild(div);
      });
    });
  </script>
</body>
</html>




========================================
File: templates/download_complete.html
========================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>DocFactory - Download Complete</title>
  <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
  <h1>✅ Document Generated Successfully!</h1>

  <section>
    <p>Your document "<strong>{{ out_filename }}</strong>" is ready.</p>
    <a href="{{ download_url }}" download="{{ out_filename }}" class="button-link">Download Document</a>
  </section>

  <section style="margin-top: 2em;">
    <p>Ready to start a new document?</p>
    <button onclick="window.location.href='/'">Start New Template</button>
  </section>

  <style>
    /* Add specific styles for download button if needed */
    .button-link {
        display: inline-block;
        background: #28a745; /* Green color */
        color: white;
        border: none;
        padding: 0.8em 1.5em;
        font-size: 1.1em;
        cursor: pointer;
        text-decoration: none; /* Remove underline */
        border-radius: 4px; /* Slightly rounded corners */
        text-align: center;
    }
    .button-link:hover {
        background: #218838; /* Darker green on hover */
    }
  </style>
</body>
</html>




========================================
File: requirements.txt
========================================
flask==2.3.2
gunicorn==21.2.0
python-docx==1.1.0
python-pptx==0.6.23
pandas==2.1.4
openpyxl==3.1.2
Pillow==10.1.0



